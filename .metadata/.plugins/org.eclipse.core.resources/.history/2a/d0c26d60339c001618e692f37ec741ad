package SCREEN;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.maps.MapObject;
import com.badlogic.gdx.maps.objects.RectangleMapObject;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.viewport.FitViewport;
import com.badlogic.gdx.utils.viewport.Viewport;

import SCENES.Hud;
import SPRITES.Mario;
import run.game.Jumper;

public class main_test implements Screen{
		Jumper jumper;
		float w,h;
		OrthographicCamera gameCam;
		Viewport gamePort;
		Hud hud;
		//tiled map
		TmxMapLoader maploader;
		TiledMap map;
		OrthogonalTiledMapRenderer render;
		//box2d
		World world;
		Box2DDebugRenderer b2dr;
		BodyDef bdef;
		PolygonShape pshape;
		FixtureDef fdef;
		Body body;
		
		public Mario player;


		

		public PlayScreen(Jumper jumper) {
			this.jumper = jumper;
			
			w=Jumper.screenW/jumper.PPM;
			h=Jumper.screenH/jumper.PPM;
			
			gameCam = new OrthographicCamera();
			gamePort = new FitViewport(w, h);
			gamePort.setCamera(gameCam);
			hud = new Hud(jumper.batch);
			//tiled map
			maploader = new TmxMapLoader();
			map = maploader.load("level1-1.tmx");
			render = new OrthogonalTiledMapRenderer(map,1/jumper.PPM);
			gameCam.position.set(w/2, h/2, 0);
			//box2d
			world = new World(new Vector2(0,0), true);
			b2dr = new Box2DDebugRenderer();
			
			bdef = new BodyDef();
			pshape = new PolygonShape();
			fdef = new FixtureDef();
			//get object ground from tiledmap
			for(MapObject object:map.getLayers().get(2).getObjects().getByType(RectangleMapObject.class)){
				ObjectofMap(object);
			}
			//get object pipe from tiledmap
			for(MapObject object:map.getLayers().get(3).getObjects().getByType(RectangleMapObject.class)){
				ObjectofMap(object);
			}
			//get object coin from tiledmap
			for(MapObject object:map.getLayers().get(4).getObjects().getByType(RectangleMapObject.class)){
				ObjectofMap(object);
			}
			//get object brick from tiledmap
			for(MapObject object:map.getLayers().get(5).getObjects().getByType(RectangleMapObject.class)){
				ObjectofMap(object);
			}
			
			player = new Mario(world);

			
		}
		//MapObject object
		public void ObjectofMap(MapObject object){
			Rectangle rec = ((RectangleMapObject)object).getRectangle();
			bdef.type = BodyDef.BodyType.StaticBody;
			bdef.position.set((rec.getX()+rec.getWidth()/2)/jumper.PPM, (rec.getY()+rec.getHeight()/2)/jumper.PPM);
			body = world.createBody(bdef);
			
			pshape.setAsBox((rec.getWidth()/2)/jumper.PPM, (rec.getHeight()/2)/jumper.PPM);
			fdef.shape = pshape;
			body.createFixture(fdef);
		}

		@Override
		public void show() {

			
			
		}
		
		public void update(float dt){
			handleInput(dt);
			gameCam.update();
			world.step(1/60f, 6, 2);
			//setting camera position
			gameCam.position.x = player.mbody.getPosition().x/jumper.PPM+w/2;		
			render.setView(gameCam);
		}
		public void handleInput(float dt){
//			if(Gdx.input.isTouched()){
//				gameCam.position.x += 1000*dt;			
//			}
			if(Gdx.input.isKeyJustPressed(Input.Keys.UP)){
				player.mbody.applyLinearImpulse(new Vector2(0,2f), player.mbody.getWorldCenter(), true);
			}
			if(Gdx.input.isKeyJustPressed(Input.Keys.DOWN)){
				player.mbody.applyLinearImpulse(new Vector2(0,0), player.mbody.getWorldCenter(), true);
			}
			if(Gdx.input.isKeyJustPressed(Input.Keys.LEFT)){
				player.mbody.applyLinearImpulse(new Vector2(-0.5f,0), player.mbody.getWorldCenter(), true);
			}
			if(Gdx.input.isKeyJustPressed(Input.Keys.RIGHT)){
				player.mbody.applyLinearImpulse(new Vector2(0.5f,0), player.mbody.getWorldCenter(), true);
			}
			
			

		}

		@Override
		public void render(float delta) {
			update(delta);
			Gdx.gl.glClearColor(0, 0, 0, 1);
			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
			//after reset screen render gameCam
			render.render();
			
			//render b2dr
			b2dr.render(world, gameCam.combined);
			jumper.batch.setProjectionMatrix(hud.stage.getCamera().combined);		
			hud.stage.draw();
			jumper.batch.begin();
		
			jumper.batch.end();
			
		}

		@Override
		public void resize(int width, int height) {
			gamePort.update(width, height);
			
		}

		@Override
		public void pause() {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void resume() {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void hide() {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void dispose() {
			world.dispose();
			b2dr.dispose();
			pshape.dispose();
			
			
		}


}
